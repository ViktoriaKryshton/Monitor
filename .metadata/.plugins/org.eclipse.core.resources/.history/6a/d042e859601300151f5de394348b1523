package main.java.com.fpmi.project.database;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.ArrayList;

import main.java.com.fpmi.project.entity.Record;

public class CPUDataRecord implements IMemoryRecordRepository {

	   private Connection connection;
	   
	   private final static String READ_CPU_INFO = "SELECT * FROM `ram` ORDER BY `cpu`.`date` DESC LIMIT 0 , 20"
	   private final static String SUBMIT_CPU_INFO = "INSERT INTO 'ram' (available, date) value (?,?)";


	    public AbstractDAO(Connection connection) {
	        this.connection = connection;
	    }

	    public void close(Statement st) {
	        try {
	            if (st != null) {
	                st.close();
	            }
	        } catch (SQLException ex) {
	        }
	    }
		@Override
		public void write(Record record) {
			 PreparedStatement statement = null;
			 try {
				 statement = connection.prepareStatement(SUBMIT_CPU_INFO);
				 statement.setLong(1, size);
				 Calendar today = new GregorianCalendar();
				 DateFormat df = new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss");
				 java.util.Date date = today.getTime();
				 String reportDate = df.format(date);
				 statement.setDate(2, Date.valueOf(reportDate));
				 statement.executeUpdate();
			 } catch (SQLException ex) {
			 }
		}

		public List<Record> read() {
			 PreparedStatement statement = null;
		        try {
		            statement = connection.prepareStatement(SUBMIT_CPU_INFO);
		            ResultSet resultSet = statement.executeQuery();
		            List<Record> records = new ArrayList<Record>();
		            Record record;
		            while (resultSet.next()) {
		                book = new Book();
		                book.setId(resultSet.getInt(idFieldName));
		                book.setAuthor(resultSet.getString("author"));
		                book.setTitle(resultSet.getString("title"));
		                book.setGenre(resultSet.getString("genre_name"));
		                book.setPublicationYear(resultSet.getShort("publication_year"));
		                book.setPublishingHouse(resultSet.getString("publishing_house"));
		                book.setDescription(resultSet.getString("description"));
		                book.setAvailableCount(resultSet.getByte("available_count"));
		                book.setReadingPlace(resultSet.getString("place"));
		                Rating rating = new Rating();
		                rating.setVotersNumber(Integer.parseInt(resultSet.getString("voters_number")));
		                rating.setAverage(Double.parseDouble(resultSet.getString("average")));
		                book.setRating(rating);
		                book.setImage(resultSet.getString("image"));
		                catalog.add(book);
		        } catch (SQLException ex) {
		            throw new DAOTechnicalException(ex);
		        } finally {
		            close(statement);
		        }
		}
	}

